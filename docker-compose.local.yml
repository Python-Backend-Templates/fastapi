networks:
  network:
    name: ${PROJECT_NAME}_network

services:
  db:
    container_name: ${PROJECT_NAME}-db
    image: postgres:15.4
    volumes:
      - db_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_PORT: ${DB_PORT}
    networks:
      - network
    expose:
      - ${DB_PORT}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB -p $$POSTGRES_PORT"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  asgi:
    container_name: ${PROJECT_NAME}-asgi
    build:
      context: ./src/
      dockerfile: Dockerfile.local
    env_file:
      - .env
    volumes:
      - ./src/:/apps/
      - ${STATIC_PATH}:/static
      - ${MEDIA_PATH}:/media
      - ${LOG_PATH}:/logs
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "${ASGI_PORT}:${ASGI_PORT}"
    networks:
      - network
    restart: unless-stopped

  redis:
    container_name: ${PROJECT_NAME}-redis
    image: redis:7.4-alpine
    networks:
      - network
    expose:
      - ${REDIS_PORT}
    volumes:
      - redis_data:/var/lib/redis/data/
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
    restart: unless-stopped

  rabbitmq:
    container_name: ${PROJECT_NAME}-rabbitmq
    image: rabbitmq:3.12-management
    hostname: ${PROJECT_NAME}-rabbitmq-node
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    expose:
      - ${RABBITMQ_PORT}
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    networks:
      - network
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3
    restart: unless-stopped

  celery_worker:
    container_name: ${PROJECT_NAME}-celery-worker
    build:
      context: ./src/
      dockerfile: Dockerfile.celery
    command: sh -c "python -m celery -A config worker -l debug"
    depends_on:
      - asgi
    env_file:
      - .env
    volumes:
      - ./src/:/apps/
      - ${STATIC_PATH}:/static
      - ${MEDIA_PATH}:/media
      - ${LOG_PATH}:/logs
    networks:
      - network
    restart: unless-stopped

  flower:
    container_name: ${PROJECT_NAME}-flower
    image: mher/flower:2.0
    environment:
      CELERY_BROKER_URL: ${CELERY_BROKER_URL}
      CELERY_RESULT_BACKEND: ${CELERY_RESULT_BACKEND}
      FLOWER_PORT: ${FLOWER_PORT}
      FLOWER_BASIC_AUTH: ${FLOWER_LOGIN}:${FLOWER_PASSWORD}
      FLOWER_URL_PREFIX: ${FLOWER_URL_PREFIX}
    depends_on:
      - celery_worker
    env_file:
      - .env
    ports:
      - "${FLOWER_PORT}:${FLOWER_PORT}"
    networks:
      - network
    restart: unless-stopped

volumes:
  db_data:
    name: ${PROJECT_NAME}_db_data
  redis_data:
    name: ${PROJECT_NAME}_redis_data
  rabbitmq_data:
    name: ${PROJECT_NAME}_rabbitmq_data
